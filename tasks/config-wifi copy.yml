---
- name: Install and configure dnsmasq, hostapd and ufw on Debian
  become: yes
  apt:
    name: 
    - dnsmasq
    - hostapd
    - ufw
    state: present
  when: ansible_facts.os_family == 'Debian'

- name: Install and configure dnsmasq, hostapd and ufw on Arch
  become: yes
  pacman:
    name: 
    - dnsmasq
    - hostapd
    - ufw
    state: present
  when: ansible_facts.os_family == 'Arch'

- name: Unmask hostapd
  become: yes
  command: systemctl unmask hostapd

- name: Copy templated hostapd config into a place.
  become: yes
  ansible.builtin.template:
    src: ./templates/hostapd.conf.yaml
    dest: "/etc/hostapd/hostapd.conf"
    owner: root
    group: root
    mode: 0644
  notify:
    - restart hostapd

- name: Start and enable ufw and hostapd services
  become: yes
  systemd:
    name: "{{ item }}"
    state: started
    enabled: yes
  loop:
    - ufw
    - hostapd

- name: Allow incoming traffic on ssh
  become: yes
  ufw:
    rule: allow
    direction: in
    port: "22"
    proto: tcp
    state: enabled

- name: Enable IP Forwarding Configuration
  become: yes
  lineinfile:
    path: /etc/sysctl.conf
    regexp: '^#net.ipv4.ip_forward=1'
    line: 'net.ipv4.ip_forward=1'

- name: Immedeately apply IP Forwarding
  become: yes
  shell: |
    echo 1 > /proc/sys/net/ipv4/ip_forward

- name: Check vpntv OpenVPN POSTROUTNG rules to ufw is already present
  become: yes
  lineinfile:
    state: absent
    path: /etc/ufw/before.rules
    regexp: "^# VPNTV OPENVPN RULES"
  check_mode: true
  changed_when: false  # This just makes things look prettier in the logs
  register: ufw_openvpn_rules_check

- name: Add OpenVPN POSTROUTNG rules to ufw
  become: yes
  lineinfile:
    state: present
    path: /etc/ufw/before.rules
    line: "\n# VPNTV OPENVPN RULES\n*nat\n:POSTROUTING ACCEPT [0:0]\n-A POSTROUTING -s 10.0.90.0/24 -o wlan0 -j MASQUERADE\nCOMMIT\n#VPNTV RULES END"
    backup: yes
  when: ufw_openvpn_rules_check.found == 0
  notify:
    - restart ufw

- name: Allow incoming traffic for external OpenVPN {{ openvpn_external_port}} port
  become: yes
  ufw:
    rule: allow
    direction: in
    interface: "any"
    port: "{{ openvpn_external_port }}"
    proto: "tcp"
    state: enabled

- name: Allow incoming traffic for specific ports DNS, DHCP and HTTPS
  become: yes
  ufw:
    rule: allow
    direction: in
    interface: "{{ item.interface }}"
    port: "{{ item.port }}"
    proto: "{{ item.proto }}"
    state: enabled
  with_items:
    - { interface: any, port: 67, proto: udp }
    - { interface: any, port: 68, proto: udp }
    - { interface: any, port: 53, proto: udp }
    - { interface: any, port: 5353, proto: udp }
  #  - { interface: any, port: 80, proto: tcp }
    - { interface: any, port: 443, proto: tcp }
    - { interface: any, port: 443, proto: udp }

- name: Allow outgoing traffic for any intrfaces
  become: yes
  ufw:
    rule: allow
    direction: out
    interface: any
    state: enabled

- name: Check vpntv dhcpcd static IP configuration was already done
  become: yes
  lineinfile:
    state: absent
    dest: /etc/dhcpcd.conf
    regexp: "^# VPNTV DHCPCD RULES"
  check_mode: true
  changed_when: false
  register: dhcpcd_vpntv_rules_check

- name: Add vpntv dhcpcd static IP configuration
  become: yes
  lineinfile:
    state: present
    path: /etc/dhcpcd.conf
    line: "\n# VPNTV DHCPCD RULES\ninterface wlan1\n    static ip_address=10.0.90.1/24\n    nohook wpa_supplicant\ndenyinterfaces wlan1\n#VPNTV CONF END"
    backup: yes
  when: dhcpcd_vpntv_rules_check.found == 0
  notify:
    - restart dhcpcd

- name: Check vpntv dnsmasq configuration was already done
  become: yes
  lineinfile:
    state: absent
    dest: /etc/dnsmasq.conf
    regexp: "^# VPNTV DNSMASQ RULES"
  check_mode: true
  changed_when: false
  register: dnsmasq_vpntv_rules_check

- name: Add vpntv dnsmasq configuration
  become: yes
  lineinfile:
    state: present
    path: /etc/dnsmasq.conf
    line: "\n# VPNTV DNSMASQ RULES\ninterface=wlan1\ndhcp-range=10.0.90.2,10.0.90.25,255.255.255.0,24h\n#VPNTV CONF END"
    backup: yes
  when: dnsmasq_vpntv_rules_check.found == 0
  notify:
    - restart dnsmasq